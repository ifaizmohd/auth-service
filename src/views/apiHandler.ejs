<script type="text/javascript">
  function apiHandler() {
    const baseUrl = 'http://localhost:3001/api';
    const token =
      (window &&
        window.sessionStorage &&
        window.sessionStorage.getItem('token')) ||
      '';

    /**
     * Sends a POST request to the specified endpoint.
     * @param {string} url - The endpoint URL to send the POST request to (appended to baseUrl).
     * @param {Object} payload - The request body data to be sent in JSON format.
     * @returns {Promise<Response>} - Resolves with the response object from the server, rejects with an error message if the request fails.
     */
    const post = (url, payload) => {
      return new Promise(async (resolve, reject) => {
        try {
          // Make a POST request with JSON headers and stringified request body
          const response = await apiClient(`${this.baseUrl}${url}`, {
            method: 'POST',
            headers: {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              'x-auth-token': `${this.token}`,
            },
            body: JSON.stringify(payload),
          });
          resolve(response); // Resolve with the server response if successful
        } catch (error) {
          reject(`Network or server error: ${error.message}`); // Reject with error message in case of failure
        }
      });
    };

    /**
     * Sends a GET request to the specified endpoint.
     * @param {string} url - The endpoint URL to send the GET request to (appended to baseUrl).
     * @returns {Promise<Response>} - Resolves with the response object from the server, rejects with an error message if the request fails.
     */
    const get = (url) => {
      return new Promise(async (resolve, reject) => {
        try {
          // Make a GET request with JSON headers
          const response = await apiClient(`${this.baseUrl}${url}`, {
            method: 'GET',
            headers: {
              Accept: 'application/json',
              'Content-Type': 'application/json',
              'x-auth-token': `${this.token}`,
            },
          });
          resolve(response); // Resolve with the server response if successful
        } catch (error) {
          reject(`Network or server error: ${error.message}`); // Reject with error message in case of failure
        }
      });
    };

    return { post, get };
  }
</script>
